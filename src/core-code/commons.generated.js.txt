/*
 * Copyright (c) 2022-2023 SÃ©bastien Piquemal <sebpiq@protonmail.com>, Chris McCormick.
 *
 * This file is part of WebPd
 * (see https://github.com/sebpiq/WebPd).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
const _commons_ARRAYS = new Map();
const _commons_ARRAYS_SKEDULER = sked_create(false);
const _commons_ENGINE_LOGGED_SKEDULER = sked_create(true);
const _commons_FRAME_SKEDULER = sked_create(false);
// =========================== COMMONS API
/**
 * @param callback Called when the engine is configured, or immediately if the engine
 * was already configured.
 */
function commons_waitEngineConfigure(callback) {
    sked_wait(_commons_ENGINE_LOGGED_SKEDULER, 'configure', callback);
}
/**
 * Schedules a callback to be called at the given frame.
 * If the frame already occurred, or is the current frame, the callback won't be executed.
 */
function commons_waitFrame(frame, callback) {
    return sked_wait_future(_commons_FRAME_SKEDULER, frame.toString(), callback);
}
/**
 * Cancels waiting for a frame to occur.
 */
function commons_cancelWaitFrame(id) {
    sked_cancel(_commons_FRAME_SKEDULER, id);
}
/**
 * @param callback Called immediately if the array exists, and subsequently, everytime
 * the array is set again.
 * @returns An id that can be used to cancel the subscription.
 */
function commons_subscribeArrayChanges(arrayName, callback) {
    const id = sked_subscribe(_commons_ARRAYS_SKEDULER, arrayName, callback);
    if (_commons_ARRAYS.has(arrayName)) {
        callback(arrayName);
    }
    return id;
}
/**
 * @param id The id received when subscribing.
 */
function commons_cancelArrayChangesSubscription(id) {
    sked_cancel(_commons_ARRAYS_SKEDULER, id);
}
/** Gets an named array, throwing an error if the array doesn't exist. */
function commons_getArray(arrayName) {
    if (!_commons_ARRAYS.has(arrayName)) {
        throw new Error('Unknown array ' + arrayName);
    }
    return _commons_ARRAYS.get(arrayName);
}
function commons_hasArray(arrayName) {
    return _commons_ARRAYS.has(arrayName);
}
function commons_setArray(arrayName, array) {
    _commons_ARRAYS.set(arrayName, array);
    sked_emit(_commons_ARRAYS_SKEDULER, arrayName);
}
// =========================== PRIVATE API
function _commons_emitEngineConfigure() {
    sked_emit(_commons_ENGINE_LOGGED_SKEDULER, 'configure');
}
function _commons_emitFrame(frame) {
    sked_emit(_commons_FRAME_SKEDULER, frame.toString());
}
