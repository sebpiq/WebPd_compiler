/*
 * Copyright (c) 2012-2020 SÃ©bastien Piquemal <sebpiq@gmail.com>
 *
 * BSD Simplified License.
 * For information on usage and redistribution, and for a DISCLAIMER OF ALL
 * WARRANTIES, see the file, "LICENSE.txt," in this distribution.
 *
 * See https://github.com/sebpiq/WebPd_pd-parser for documentation
 *
 */
const _commons_ARRAYS = new Map();
const _commons_ARRAYS_SKEDULER = sked_create(false);
const _commons_ENGINE_LOGGED_SKEDULER = sked_create(true);
// =========================== COMMONS API
/**
 * @param callback Called when the engine is configured, or immediately if the engine
 * was already configured.
 */
function commons_waitEngineConfigure(callback) {
    sked_wait(_commons_ENGINE_LOGGED_SKEDULER, 'configure', callback);
}
/**
 * @param callback Called immediately if the array exists, and subsequently, everytime
 * the array is set again.
 * @returns An id that can be used to cancel the subscription.
 */
function commons_subscribeArrayChanges(arrayName, callback) {
    const id = sked_subscribe(_commons_ARRAYS_SKEDULER, arrayName, callback);
    if (_commons_ARRAYS.has(arrayName)) {
        callback(arrayName);
    }
    return id;
}
/**
 * @param id The id received when subscribing.
 */
function commons_cancelArrayChangesSubscription(id) {
    sked_cancel(_commons_ARRAYS_SKEDULER, id);
}
/** Gets an named array, throwing an error if the array doesn't exist. */
function commons_getArray(arrayName) {
    if (!_commons_ARRAYS.has(arrayName)) {
        throw new Error('Unknown array ' + arrayName);
    }
    return _commons_ARRAYS.get(arrayName);
}
function commons_hasArray(arrayName) {
    return _commons_ARRAYS.has(arrayName);
}
function commons_setArray(arrayName, array) {
    _commons_ARRAYS.set(arrayName, array);
    sked_emit(_commons_ARRAYS_SKEDULER, arrayName);
}
// =========================== PRIVATE API
function _commons_emitEngineConfigure() {
    sked_emit(_commons_ENGINE_LOGGED_SKEDULER, 'configure');
}
