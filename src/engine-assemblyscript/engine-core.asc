/*
 * Copyright (c) 2012-2020 SÃ©bastien Piquemal <sebpiq@gmail.com>
 *
 * BSD Simplified License.
 * For information on usage and redistribution, and for a DISCLAIMER OF ALL
 * WARRANTIES, see the file, "LICENSE.txt," in this distribution.
 *
 * See https://github.com/sebpiq/WebPd_pd-parser for documentation
 *
 */

type MessageFloatDatum = ${FloatType}
type MessageCharDatum = i32

type MessageTemplate = Array<i32>
type MessageHeaderEntry = i32
type MessageHeader = Int32Array

export const MESSAGE_DATUM_TYPE_FLOAT: MessageHeaderEntry = 0
export const MESSAGE_DATUM_TYPE_STRING: MessageHeaderEntry = 1

function createMessageBuffer(template: MessageTemplate): ArrayBuffer {
    let i: i32 = 0
    let byteCount: i32 = 0
    let datumTypes: Array<MessageHeaderEntry> = []
    let datumPositions: Array<MessageHeaderEntry> = []

    i = 0
    while (i < template.length) {
        switch(template[i]) {
            case MESSAGE_DATUM_TYPE_FLOAT:
                byteCount += sizeof<MessageFloatDatum>()
                datumTypes.push(MESSAGE_DATUM_TYPE_FLOAT)
                datumPositions.push(byteCount)
                i += 1
                break
            case MESSAGE_DATUM_TYPE_STRING:
                byteCount += sizeof<MessageCharDatum>() * template[i + 1]
                datumTypes.push(MESSAGE_DATUM_TYPE_STRING)
                datumPositions.push(byteCount)
                i += 2
                break
            default:
                throw new Error(`unknown datum type " + template[i]`)
        }
    }

    const datumCount = datumTypes.length
    const headerByteCount = _computeMessageHeaderLength(datumCount) * sizeof<MessageHeaderEntry>()
    byteCount += headerByteCount

    const buffer = new ArrayBuffer(byteCount)
    const dataView = new DataView(buffer)
    let writePosition: i32 = 0
    
    // Write message's header : [
    //      <Datum count>, 
    //      <Datum 1 type>,  ..., <Datum N type>, 
    //      <Datum 1 start>, ..., <Datum N start>, <Datum N end>
    //      ... DATA ...
    // ]
    dataView.setInt32(writePosition, datumCount)
    writePosition += sizeof<MessageHeaderEntry>()

    for (i = 0; i < datumCount; i++) {
        dataView.setInt32(writePosition, datumTypes[i])
        writePosition += sizeof<MessageHeaderEntry>()
    }

    dataView.setInt32(writePosition, headerByteCount)
    writePosition += sizeof<MessageHeaderEntry>()
    for (i = 0; i < datumCount; i++) {
        dataView.setInt32(writePosition, headerByteCount + datumPositions[i])
        writePosition += sizeof<MessageHeaderEntry>()
    }

    return buffer
}

function _computeMessageHeaderLength(datumCount: i32): i32 {
    return 1 + datumCount * 2 + 1
}

function _getMessageDatumCount(messageDataView: DataView): MessageHeaderEntry {
    return messageDataView.getInt32(0)
}

function _getMessageHeader(messageDataView: DataView, datumCount: MessageHeaderEntry): MessageHeader {
    const headerLength = _computeMessageHeaderLength(datumCount)
    // TODO : why is this `wrap` not working ?
    // return Int32Array.wrap(messageDataView.buffer, 0, headerLength)
    const messageHeader = new Int32Array(headerLength)
    for (let i = 0; i < headerLength; i++) {
        messageHeader[i] = messageDataView.getInt32(sizeof<MessageHeaderEntry>() * i)
    }
    return messageHeader
}

function _getMessageDatumTypes(header: MessageHeader): MessageHeader {
    return header.slice(1, 1 + header[0])
}

function _getMessageDatumPositions(header: MessageHeader): MessageHeader {
    return header.slice(1 + header[0])
}

class Message {
    public dataView: DataView
    public header: MessageHeader
    public datumCount: MessageHeaderEntry
    public datumTypes: MessageHeader
    public datumPositions: MessageHeader

    constructor(messageBuffer: ArrayBuffer) {
        this.dataView = new DataView(messageBuffer)
        this.datumCount = _getMessageDatumCount(this.dataView)
        this.header = _getMessageHeader(this.dataView, this.datumCount)
        this.datumTypes = _getMessageDatumTypes(this.header)
        this.datumPositions = _getMessageDatumPositions(this.header)
    }

    public static fromTemplate(template: MessageTemplate): Message {
        return new Message(createMessageBuffer(template))
    }
}


export function writeStringDatum(
    message: Message, 
    datumIndex: i32,
    value: string,
): void {
    const startPosition = message.datumPositions[datumIndex]
    const endPosition = message.datumPositions[datumIndex + 1]
    const expectedStringLength: i32 = (endPosition - startPosition) / sizeof<MessageCharDatum>()
    if (value.length !== expectedStringLength) {
        throw new Error(`Invalid string size, specified ${expectedStringLength}, received ${value.length}`)
    }

    for (let i = 0; i < value.length; i++) {
        message.dataView.setInt32(
            startPosition + i * sizeof<MessageCharDatum>(), 
            value.codePointAt(i)
        )
    }
}

export function writeFloatDatum(
    message: Message, 
    datumIndex: i32,
    value: MessageFloatDatum,
): void {
    message.dataView.${setFloat}(message.datumPositions[datumIndex], value)
}

export function readStringDatum(
    message: Message, 
    datumIndex: i32,
): string {
    const startPosition = message.datumPositions[datumIndex]
    const endPosition = message.datumPositions[datumIndex + 1]
    const stringLength: i32 = (endPosition - startPosition) / sizeof<MessageCharDatum>()
    let value: string = ''
    for (let i = 0; i < stringLength; i++) {
        value += String.fromCodePoint(message.dataView.getInt32(startPosition + sizeof<MessageCharDatum>() * i))
    }
    return value
}

export function readFloatDatum(
    message: Message, 
    datumIndex: i32,
): MessageFloatDatum {
    return message.dataView.${getFloat}(message.datumPositions[datumIndex])
}

// ---------------------------
export function createMessage(templateBuffer: ArrayBuffer): Message {
    // Convert the template buffer to a MessageTemplate
    let i: i32 = 0
    const templateData: DataView = new DataView(templateBuffer)
    const templateLength: i32 = templateBuffer.byteLength / sizeof<i32>()
    const template: MessageTemplate = new Array(templateLength)
    for (i = 0; i < templateLength; i++) {
        template[i] = templateData.getInt32(i * sizeof<i32>())
    }

    // Create the message buffer and return a `Message`
    const messageBuffer: ArrayBuffer = createMessageBuffer(template)
    return new Message(messageBuffer)
}

export function createMessageArray(): Message[] {
    const messageArray: Message[] = []
    return messageArray
}

export function getMessageDatumTypes(message: Message): ArrayBuffer {
    const buffer: ArrayBuffer = new ArrayBuffer(message.datumCount * sizeof<MessageHeaderEntry>())
    const dataView: DataView = new DataView(buffer)
    let i: i32 = 0
    for (i = 0; i < message.datumTypes.length; i++) {
        dataView.setInt32(i * sizeof<MessageHeaderEntry>(), message.datumTypes[i])
    }
    
    return dataView.buffer
}

export function pushMessageToArray(messageArray: Message[], message: Message): void {
    messageArray.push(message)
}