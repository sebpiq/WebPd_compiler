/*
 * Copyright (c) 2012-2020 SÃ©bastien Piquemal <sebpiq@gmail.com>
 *
 * BSD Simplified License.
 * For information on usage and redistribution, and for a DISCLAIMER OF ALL
 * WARRANTIES, see the file, "LICENSE.txt," in this distribution.
 *
 * See https://github.com/sebpiq/WebPd_pd-parser for documentation
 *
 */

// =========================== FILES
type FileOperationId = i32
type Url = string
type DecodingInfo = ArrayBuffer
type EncodingInfo = ArrayBuffer
type FileOperationStatus = i32
const FILE_OPERATION_UNKNOWN: FileOperationStatus = -1
const FILE_OPERATION_PROCESSING: FileOperationStatus = 0
const FILE_OPERATION_SUCCESS: FileOperationStatus = 1
const FILE_OPERATION_FAILED: FileOperationStatus = 2

const FILE_OPERATIONS_STATUSES = new Map<FileOperationId, FileOperationStatus>()
const FILE_OPERATIONS_SOUND_DATA = new Map<FileOperationId, Sound[]>()

const FILE_OPERATION_COUNTER: i32 = 0

// -------------- PUBLIC API
// These functions are implemented in the host environment
export declare function file_readSoundListener (url: Url, info: DecodingInfo): void
export declare function file_writeSoundListener (url: Url, data: Sound[], info: EncodingInfo): void

// These functions are to be called by the host environment to notify the end of the operation
export function file_readSoundDone (id: FileOperationId, data: Sound[]): void { //, METADATA: i32): void {
    FILE_OPERATIONS_STATUSES.set(id, FILE_OPERATION_SUCCESS)
    FILE_OPERATIONS_SOUND_DATA.set(id, data)
}

export function file_writeSoundDone (id: FileOperationId): void {
    FILE_OPERATIONS_STATUSES.set(id, FILE_OPERATION_SUCCESS)
}

// -------------- Internal API
function file_readSound(url: Url): FileOperationId {
    const id: FileOperationId = FILE_OPERATION_COUNTER++
    FILE_OPERATIONS_STATUSES.set(id, FILE_OPERATION_PROCESSING)
    file_readSoundListener(url, new ArrayBuffer(0))
    return id
}

function file_writeSound(url: Url, data: Sound[]): FileOperationId {
    const id: FileOperationId = FILE_OPERATION_COUNTER++
    FILE_OPERATIONS_STATUSES.set(id, FILE_OPERATION_PROCESSING)
    file_writeSoundListener(url, data, new ArrayBuffer(0))
    return id
}

function file_checkOperationStatus(id: FileOperationId): FileOperationStatus {
    if (FILE_OPERATIONS_STATUSES.has(id)) {
        return FILE_OPERATIONS_STATUSES.get(id)
    } else {
        return FILE_OPERATION_UNKNOWN
    }
}

function file_checkoutSoundData(id: FileOperationId): Sound[] {
    const data: Sound[] = FILE_OPERATIONS_SOUND_DATA.get(id)
    FILE_OPERATIONS_SOUND_DATA.delete(id)
    return data
}
