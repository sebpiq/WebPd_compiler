/*
 * Copyright (c) 2012-2020 SÃ©bastien Piquemal <sebpiq@gmail.com>
 *
 * BSD Simplified License.
 * For information on usage and redistribution, and for a DISCLAIMER OF ALL
 * WARRANTIES, see the file, "LICENSE.txt," in this distribution.
 *
 * See https://github.com/sebpiq/WebPd_pd-parser for documentation
 *
 */

type FileOperationId = i32
type Url = string
type DecodingInfo = ArrayBuffer
type EncodingInfo = ArrayBuffer
type FileOperationStatus = i32
const FILE_OPERATION_UNKNOWN: FileOperationStatus = -1
const FILE_OPERATION_PROCESSING: FileOperationStatus = 0
const FILE_OPERATION_SUCCESS: FileOperationStatus = 1
const FILE_OPERATION_FAILED: FileOperationStatus = 2

const FILE_OPERATIONS_STATUSES = new Map<FileOperationId, FileOperationStatus>()
const FILE_OPERATIONS_SOUNDS = new Map<FileOperationId, TypedArray[]>()

let FILE_OPERATION_COUNTER: i32 = 0

// =========================== PUBLIC API
// These functions are implemented in the host environment
export declare function fs_requestReadSoundFile (id: FileOperationId, url: Url, info: DecodingInfo): void
export declare function fs_requestReadSoundStream (id: FileOperationId, url: Url, info: DecodingInfo): void
export declare function fs_requestWriteSoundFile (id: FileOperationId, url: Url, sound: TypedArray[], info: EncodingInfo): void
export declare function fs_requestCloseSoundStream (id: FileOperationId): void

// These functions are to be called by the host environment to notify the end of the operation
export function fs_readSoundFileResponse (id: FileOperationId, sound: TypedArray[]): void { //, METADATA: i32): void {
    FILE_OPERATIONS_STATUSES.set(id, FILE_OPERATION_SUCCESS)
    FILE_OPERATIONS_SOUNDS.set(id, sound)
}

export function fs_writeSoundFileResponse (id: FileOperationId): void {
    FILE_OPERATIONS_STATUSES.set(id, FILE_OPERATION_SUCCESS)
}

export function fs_soundStreamData (id: FileOperationId, block: TypedArray[]): i32 {
    return 0
}

export function fs_soundStreamClose (id: FileOperationId): void {}

// =========================== INTERNAL API
function fs_readSoundFile(url: Url): FileOperationId {
    const id: FileOperationId = FILE_OPERATION_COUNTER++
    FILE_OPERATIONS_STATUSES.set(id, FILE_OPERATION_PROCESSING)
    fs_requestReadSoundFile(id, url, new ArrayBuffer(0))
    return id
}

function fs_readSoundStream(url: Url): FileOperationId {
    const id: FileOperationId = FILE_OPERATION_COUNTER++
    FILE_OPERATIONS_STATUSES.set(id, FILE_OPERATION_PROCESSING)
    fs_requestReadSoundStream(id, url, new ArrayBuffer(0))
    return id
}

function fs_writeSoundFile(url: Url, sound: TypedArray[]): FileOperationId {
    const id: FileOperationId = FILE_OPERATION_COUNTER++
    FILE_OPERATIONS_STATUSES.set(id, FILE_OPERATION_PROCESSING)
    fs_requestWriteSoundFile(url, sound, new ArrayBuffer(0))
    return id
}

function fs_checkoutSoundFile(id: FileOperationId): TypedArray[] {
    const sound: TypedArray[] = FILE_OPERATIONS_SOUNDS.get(id)
    FILE_OPERATIONS_SOUNDS.delete(id)
    FILE_OPERATIONS_STATUSES.delete(id)
    return sound
}

function fs_checkOperationStatus(id: FileOperationId): FileOperationStatus {
    if (FILE_OPERATIONS_STATUSES.has(id)) {
        return FILE_OPERATIONS_STATUSES.get(id)
    } else {
        return FILE_OPERATION_UNKNOWN
    }
}