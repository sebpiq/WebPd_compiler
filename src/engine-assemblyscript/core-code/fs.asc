/*
 * Copyright (c) 2012-2020 SÃ©bastien Piquemal <sebpiq@gmail.com>
 *
 * BSD Simplified License.
 * For information on usage and redistribution, and for a DISCLAIMER OF ALL
 * WARRANTIES, see the file, "LICENSE.txt," in this distribution.
 *
 * See https://github.com/sebpiq/WebPd_pd-parser for documentation
 *
 */

const FS_OPERATION_SUCCESS: i32 = ${FS_OPERATION_SUCCESS}
const FS_OPERATION_FAILURE: i32 = ${FS_OPERATION_FAILURE}

type fs_OperationId = i32
type fs_OperationStatus = i32
type fs_OperationCallback = (id: fs_OperationId, status: fs_OperationStatus) => void
type fs_OperationSoundCallback = (id: fs_OperationId, status: fs_OperationStatus, sound: TypedArray[]) => void

type Url = string
type DecodingInfo = ArrayBuffer
type EncodingInfo = ArrayBuffer

// Max length : about 10s at sample rate 44100
const _FS_SOUND_BUFFER_MAX_LENGTH = 10 * 44100

const _FS_OPERATIONS_IDS = new Set<fs_OperationId>()
const _FS_OPERATIONS_SOUNDS = new Map<fs_OperationId, TypedArray[]>()
const _FS_OPERATIONS_CALLBACKS = new Map<fs_OperationId, fs_OperationCallback>()
const _FS_OPERATIONS_SOUND_CALLBACKS = new Map<fs_OperationId, fs_OperationSoundCallback>()
const _FS_SOUND_STREAM_BUFFERS = new Map<fs_OperationId, fs_SoundBuffer>()

let FILE_OPERATION_COUNTER: i32 = 0

// =========================== FUNCTIONS IMPLEMENTED BY THE HOST
export declare function fs_requestReadSoundFile (id: fs_OperationId, url: Url, info: DecodingInfo): void
export declare function fs_requestReadSoundStream (id: fs_OperationId, url: Url, info: DecodingInfo): void
export declare function fs_requestWriteSoundFile (id: fs_OperationId, url: Url, sound: TypedArray[], info: EncodingInfo): void
export declare function fs_requestCloseSoundStream (id: fs_OperationId): void

// =========================== FS API
export function fs_readSoundFileResponse (
    id: fs_OperationId, 
    status: fs_OperationStatus, 
    sound: TypedArray[]
): void {
    if (!_FS_OPERATIONS_IDS.has(id)) {
        return
    }
    _FS_OPERATIONS_IDS.delete(id)
    _FS_OPERATIONS_SOUND_CALLBACKS.get(id)(id, status, sound)
    _FS_OPERATIONS_SOUND_CALLBACKS.delete(id)
}

export function fs_writeSoundFileResponse (id: fs_OperationId): void {
    _FS_OPERATIONS_IDS.delete(id)
    //FS_OPERATION_SUCCESS
}

export function fs_soundStreamData (id: fs_OperationId, block: TypedArray[]): i32 {
    if (!_FS_OPERATIONS_IDS.has(id)) {
        return -1
    }
    const buffer: fs_SoundBuffer = _FS_SOUND_STREAM_BUFFERS.get(id)
    return buffer.pushBlock(block)
}

export function fs_soundStreamClose (id: fs_OperationId): void {
    if (!_FS_OPERATIONS_IDS.has(id)) {
        return
    }
    _FS_OPERATIONS_IDS.delete(id)
    const callback: fs_OperationCallback = _FS_OPERATIONS_CALLBACKS.get(id)
    callback(id, FS_OPERATION_SUCCESS)
    fs_requestCloseSoundStream(id)
}

// =========================== INTERNAL API
function fs_readSoundFile(url: Url, callback: fs_OperationSoundCallback): fs_OperationId {
    const id: fs_OperationId = FILE_OPERATION_COUNTER++
    _FS_OPERATIONS_IDS.add(id)
    _FS_OPERATIONS_SOUND_CALLBACKS.set(id, callback)
    fs_requestReadSoundFile(id, url, new ArrayBuffer(0))
    return id
}

function fs_readSoundStream(url: Url, callback: fs_OperationCallback): fs_OperationId {
    const id: fs_OperationId = FILE_OPERATION_COUNTER++
    const buffer = new fs_SoundBuffer(_FS_SOUND_BUFFER_MAX_LENGTH)
    _FS_OPERATIONS_IDS.add(id)
    _FS_SOUND_STREAM_BUFFERS.set(id, buffer)
    _FS_OPERATIONS_CALLBACKS.set(id, callback)
    fs_requestReadSoundStream(id, url, new ArrayBuffer(0))
    return id
}

function fs_writeSoundFile(url: Url, sound: TypedArray[]): fs_OperationId {
    const id: fs_OperationId = FILE_OPERATION_COUNTER++
    _FS_OPERATIONS_IDS.add(id)
    fs_requestWriteSoundFile(url, sound, new ArrayBuffer(0))
    return id
}

class fs_SoundBuffer {
    public blocks: TypedArray[][]
    public maxLength: i32

    public currentLength: i32
    public currentBlockCursor: i32
    public currentBlockLength: i32
    public currentBlock: TypedArray[]
    
    constructor(maxLength: i32) {
        // Dummy block that'll get kicked at the first pullFrame
        this.blocks = [[new ${FloatArrayType}(0)]]
        this.maxLength = maxLength

        this.currentLength = 0
        this.currentBlockCursor = 0
        this.currentBlockLength = 0
        this.currentBlock = []
    }

    pushBlock(block: TypedArray[]): i32 {
        const additionalLength = block[0].length
        if (this.currentLength + additionalLength > this.maxLength) {
            throw new Error(`buffer is full`)
        }
        this.blocks.push(block)
        this.currentLength += additionalLength
        // Returns space available
        return this.maxLength - this.currentLength
    }

    availableFrameCount(): i32 {
        return this.currentLength - this.currentBlockCursor
    }

    pullFrame(): TypedArray {
        if (this.currentBlockCursor >= this.currentBlockLength) {
            const discardedBlock = this.blocks.shift()
            this.currentLength -= discardedBlock[0].length

            this.currentBlock = this.blocks[0]
            this.currentBlockLength = this.currentBlock[0].length
            this.currentBlockCursor = 0
        }

        const currentBlockCursor = this.currentBlockCursor++
        const currentBlock = this.currentBlock
        const channelCount = this.currentBlock.length
        const frame: TypedArray = new ${FloatArrayType}(channelCount)
        for (let channel: i32 = 0; channel < channelCount; channel++) {
            frame[channel] = currentBlock[channel][currentBlockCursor]
        }
        return frame
    }
}