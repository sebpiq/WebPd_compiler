/*
 * Copyright (c) 2012-2020 SÃ©bastien Piquemal <sebpiq@gmail.com>
 *
 * BSD Simplified License.
 * For information on usage and redistribution, and for a DISCLAIMER OF ALL
 * WARRANTIES, see the file, "LICENSE.txt," in this distribution.
 *
 * See https://github.com/sebpiq/WebPd_pd-parser for documentation
 *
 */

const _farray_ARRAYS: Map<string, FloatArray> = new Map()
const _farray_SKEDULER: Skeduler = sked_create(false)

// =========================== EXPORTED API
function x_farray_createListOfArrays(): FloatArray[] {
    const farray: FloatArray[] = []
    return farray
}

function x_farray_pushToListOfArrays(arrays: FloatArray[], array: FloatArray): void {
    arrays.push(array)
}

function x_farray_getListOfArraysLength(arrays: FloatArray[]): Int {
    return arrays.length
}

function x_farray_getListOfArraysElem(arrays: FloatArray[], index: Int): FloatArray {
    return arrays[index]
}

// =========================== FARRAY API
/** 
 * @callback Called immediately if the array exists, and subsequently, everytime 
 * the array is set again.
 */
function farray_subscribeChanges(
    arrayName: string,
    callback: SkedCallback,
): SkedId {
    const id: SkedId = sked_subscribe(_farray_SKEDULER, arrayName, callback)
    if (_farray_ARRAYS.has(arrayName)) {
        callback(arrayName)
    }
    return id
}

function farray_cancelSubscription(
    id: SkedId,
): void {
    sked_cancel(_farray_SKEDULER, id)
}

function farray_get(
    arrayName: string,
): FloatArray {
    if (!_farray_ARRAYS.has(arrayName)) {
        throw new Error('Unknown array ' + arrayName)
    }
    return _farray_ARRAYS.get(arrayName)
}

function farray_has(
    arrayName: string,
): boolean {
    return _farray_ARRAYS.has(arrayName)
}

function farray_set(
    arrayName: string,
    array: FloatArray,
): void {
    _farray_ARRAYS.set(arrayName, array)
    sked_emit(_farray_SKEDULER, arrayName)
}