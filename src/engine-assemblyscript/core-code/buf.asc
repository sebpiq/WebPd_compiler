/*
 * Copyright (c) 2012-2020 SÃ©bastien Piquemal <sebpiq@gmail.com>
 *
 * BSD Simplified License.
 * For information on usage and redistribution, and for a DISCLAIMER OF ALL
 * WARRANTIES, see the file, "LICENSE.txt," in this distribution.
 *
 * See https://github.com/sebpiq/WebPd_pd-parser for documentation
 *
 */

// =========================== BUF API
class buf_SoundBuffer {
    public data: FloatArray
    public length: Int
    public writeCursor: Int
    public pullAvailableLength: Int

    constructor(length: Int) {
        this.length = length
        this.data = new ${FloatArray}(length)
        this.writeCursor = 0
        this.pullAvailableLength = 0
    }

    // - Frames available
    // - Read frames sequentially nevermind of write cursor
    // - Read frames with moving delay behind write cursor
}

// TODO : Optimize by allowing to read/write directly from host
function buf_pushBlock (
    buffer: buf_SoundBuffer,
    block: FloatArray,
): Int {
    if (buffer.pullAvailableLength + block.length > buffer.length) {
        throw new Error('buffer full')
    }

    let left: Int = block.length
    while (left > 0) {
        const lengthToWrite = toInt(Math.min(
            toFloat(buffer.length - buffer.writeCursor), 
            toFloat(left)
        ))
        buffer.data.set(
            block.subarray(
                block.length - left, 
                block.length - left + lengthToWrite
            ), 
            buffer.writeCursor
        )
        left -= lengthToWrite
        buffer.writeCursor = (buffer.writeCursor + lengthToWrite) % buffer.length
        buffer.pullAvailableLength += lengthToWrite
    }
    return buffer.pullAvailableLength
}

function buf_pullSample (buffer: buf_SoundBuffer, ): Float {
    if (buffer.pullAvailableLength <= 0) {
        return 0
    }
    let readCursor: Int = buffer.writeCursor - buffer.pullAvailableLength
    if (readCursor < 0) {
        readCursor = buffer.length + readCursor
    }
    buffer.pullAvailableLength -= 1
    return buffer.data[readCursor]
}
