/*
 * Copyright (c) 2012-2020 SÃ©bastien Piquemal <sebpiq@gmail.com>
 *
 * BSD Simplified License.
 * For information on usage and redistribution, and for a DISCLAIMER OF ALL
 * WARRANTIES, see the file, "LICENSE.txt," in this distribution.
 *
 * See https://github.com/sebpiq/WebPd_pd-parser for documentation
 *
 */

// =========================== BUF API
/**
 * Ring buffer 
 */
class buf_SoundBuffer {
    public data: FloatArray
    public length: Int
    public writeCursor: Int
    public pullAvailableLength: Int

    constructor(length: Int) {
        this.length = length
        this.data = new ${FloatArray}(length)
        this.writeCursor = 0
        this.pullAvailableLength = 0
    }
}

/** Erases all the content from the buffer */
function buf_create (length: Int): buf_SoundBuffer {
    return new buf_SoundBuffer(length)
}

/** Erases all the content from the buffer */
function buf_clear (buffer: buf_SoundBuffer): void {
    buffer.data.fill(0)
}

/**
 * Pushes a block to the buffer, throwing an error if the buffer is full. 
 * If the block is written successfully, {@link buf_SoundBuffer#writeCursor} 
 * is moved corresponding with the length of data written.
 * 
 * @todo : Optimize by allowing to read/write directly from host
 */
function buf_pushBlock (
    buffer: buf_SoundBuffer,
    block: FloatArray,
): Int {
    if (buffer.pullAvailableLength + block.length > buffer.length) {
        throw new Error('buffer full')
    }

    let left: Int = block.length
    while (left > 0) {
        const lengthToWrite = toInt(Math.min(
            toFloat(buffer.length - buffer.writeCursor), 
            toFloat(left)
        ))
        buffer.data.set(
            block.subarray(
                block.length - left, 
                block.length - left + lengthToWrite
            ), 
            buffer.writeCursor
        )
        left -= lengthToWrite
        buffer.writeCursor = (buffer.writeCursor + lengthToWrite) % buffer.length
        buffer.pullAvailableLength += lengthToWrite
    }
    return buffer.pullAvailableLength
}

/**
 * Pulls a single sample from the buffer. 
 * This is a destructive operation, and the sample will be 
 * unavailable for subsequent readers with the same operation.
 */
function buf_pullSample (buffer: buf_SoundBuffer): Float {
    if (buffer.pullAvailableLength <= 0) {
        return 0
    }
    const readCursor: Int = buffer.writeCursor - buffer.pullAvailableLength
    buffer.pullAvailableLength -= 1
    return buffer.data[readCursor >= 0 ? readCursor : buffer.length + readCursor]
}

/**
 * Writes a sample at `@link writeCursor` and increments `writeCursor` by one.
 */
function buf_writeSample (buffer: buf_SoundBuffer, value: Float): void {
    buffer.data[buffer.writeCursor] = value
    buffer.writeCursor = (buffer.writeCursor + 1) % buffer.length
}

/**
 * Reads the sample at position `writeCursor - offset`.
 * @param offset Must be between 0 (for reading the last written sample)
 *  and {@link buf_SoundBuffer#length} - 1. A value outside these bounds will not cause 
 *  an error, but might cause unexpected results.
 */
function buf_readSample (buffer: buf_SoundBuffer, offset: Int): Float {
    // R = (buffer.writeCursor - 1 - offset) -> ideal read position
    // W = R % buffer.length -> wrap it so that its within buffer length bounds (but could be negative)
    // (W + buffer.length) % buffer.length -> if W negative, (W + buffer.length) shifts it back to positive.
    return buffer.data[(buffer.length + ((buffer.writeCursor - 1 - offset) % buffer.length)) % buffer.length]
}