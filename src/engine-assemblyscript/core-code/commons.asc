/*
 * Copyright (c) 2012-2020 SÃ©bastien Piquemal <sebpiq@gmail.com>
 *
 * BSD Simplified License.
 * For information on usage and redistribution, and for a DISCLAIMER OF ALL
 * WARRANTIES, see the file, "LICENSE.txt," in this distribution.
 *
 * See https://github.com/sebpiq/WebPd_pd-parser for documentation
 *
 */

const _commons_ARRAYS: Map<string, FloatArray> = new Map()
const _commons_ARRAYS_SKEDULER: Skeduler = sked_create(false)
const _commons_ENGINE_LOGGED_SKEDULER: Skeduler = sked_create(true)
const _commons_FRAME_SKEDULER: Skeduler = sked_create(false)

// =========================== COMMONS API
/** 
 * @param callback Called when the engine is configured, or immediately if the engine
 * was already configured.
 */
function commons_waitEngineConfigure(
    callback: SkedCallback,
): void {
    sked_wait(_commons_ENGINE_LOGGED_SKEDULER, 'configure', callback)
}

/** 
 * Schedules a callback to be called at the given frame.
 * If the frame already occurred, or is the current frame, the callback won't be executed.
 */
function commons_waitFrame(
    frame: Int,
    callback: SkedCallback,
): SkedId {
    return sked_wait_future(_commons_FRAME_SKEDULER, frame.toString(), callback)
}

/** 
 * Cancels waiting for a frame to occur.
 */
function commons_cancelWaitFrame(
    id: SkedId,
): void {
    sked_cancel(_commons_FRAME_SKEDULER, id)
}

/** 
 * @param callback Called immediately if the array exists, and subsequently, everytime 
 * the array is set again.
 * @returns An id that can be used to cancel the subscription.
 */
function commons_subscribeArrayChanges(
    arrayName: string,
    callback: SkedCallback,
): SkedId {
    const id: SkedId = sked_subscribe(_commons_ARRAYS_SKEDULER, arrayName, callback)
    if (_commons_ARRAYS.has(arrayName)) {
        callback(arrayName)
    }
    return id
}

/** 
 * @param id The id received when subscribing.
 */
function commons_cancelArrayChangesSubscription(
    id: SkedId,
): void {
    sked_cancel(_commons_ARRAYS_SKEDULER, id)
}

/** Gets an named array, throwing an error if the array doesn't exist. */
function commons_getArray(
    arrayName: string,
): FloatArray {
    if (!_commons_ARRAYS.has(arrayName)) {
        throw new Error('Unknown array ' + arrayName)
    }
    return _commons_ARRAYS.get(arrayName)
}

function commons_hasArray(
    arrayName: string,
): boolean {
    return _commons_ARRAYS.has(arrayName)
}

function commons_setArray(
    arrayName: string,
    array: FloatArray,
): void {
    _commons_ARRAYS.set(arrayName, array)
    sked_emit(_commons_ARRAYS_SKEDULER, arrayName)
}

// =========================== PRIVATE API
function _commons_emitEngineConfigure(): void {
    sked_emit(_commons_ENGINE_LOGGED_SKEDULER, 'configure')
}

function _commons_emitFrame(frame: Int): void {
    sked_emit(_commons_FRAME_SKEDULER, frame.toString())
}