/*
 * Copyright (c) 2012-2020 SÃ©bastien Piquemal <sebpiq@gmail.com>
 *
 * BSD Simplified License.
 * For information on usage and redistribution, and for a DISCLAIMER OF ALL
 * WARRANTIES, see the file, "LICENSE.txt," in this distribution.
 *
 * See https://github.com/sebpiq/WebPd_pd-parser for documentation
 *
 */

// TODO : Rename Datum / data to token

type MessageFloatDatum = ${FloatType}
type MessageCharDatum = i32

type MessageTemplate = Array<i32>
type MessageHeaderEntry = i32
type MessageHeader = Int32Array

export const MESSAGE_DATUM_TYPE_FLOAT: MessageHeaderEntry = ${MESSAGE_DATUM_TYPE_FLOAT}
export const MESSAGE_DATUM_TYPE_STRING: MessageHeaderEntry = ${MESSAGE_DATUM_TYPE_STRING}

// =========================== PUBLIC API
export function msg_create(templateBuffer: ArrayBuffer): Message {
    const template: MessageTemplate = _msg_bufferToArrayOfIntegers(templateBuffer)
    return Message.fromTemplate(template)
}

export function msg_createArray(): Message[] {
    const messageArray: Message[] = []
    return messageArray
}

export function msg_pushToArray(messageArray: Message[], message: Message): void {
    messageArray.push(message)
}

export function msg_getDatumTypes(message: Message): MessageHeader {
    return message.datumTypes
}

export function msg_writeStringDatum(
    message: Message, 
    datumIndex: i32,
    value: string,
): void {
    const startPosition = message.datumPositions[datumIndex]
    const endPosition = message.datumPositions[datumIndex + 1]
    const expectedStringLength: i32 = (endPosition - startPosition) / sizeof<MessageCharDatum>()
    if (value.length !== expectedStringLength) {
        throw new Error('Invalid string size, specified ' + expectedStringLength.toString() + ', received ' + value.length.toString())
    }

    for (let i = 0; i < value.length; i++) {
        message.dataView.setInt32(
            startPosition + i * sizeof<MessageCharDatum>(), 
            value.codePointAt(i)
        )
    }
}

export function msg_writeFloatDatum(
    message: Message, 
    datumIndex: i32,
    value: MessageFloatDatum,
): void {
    message.dataView.${setFloat}(message.datumPositions[datumIndex], value)
}

export function msg_readStringDatum(
    message: Message, 
    datumIndex: i32,
): string {
    const startPosition = message.datumPositions[datumIndex]
    const endPosition = message.datumPositions[datumIndex + 1]
    const stringLength: i32 = (endPosition - startPosition) / sizeof<MessageCharDatum>()
    let value: string = ''
    for (let i = 0; i < stringLength; i++) {
        value += String.fromCodePoint(message.dataView.getInt32(startPosition + sizeof<MessageCharDatum>() * i))
    }
    return value
}

export function msg_readFloatDatum(
    message: Message, 
    datumIndex: i32,
): MessageFloatDatum {
    return message.dataView.${getFloat}(message.datumPositions[datumIndex])
}

// =========================== INTERNAL API
// Message header : [
//      <Datum count>, 
//      <Datum 1 type>,  ..., <Datum N type>, 
//      <Datum 1 start>, ..., <Datum N start>, <Datum N end>
//      ... DATA ...
// ]
class Message {
    public dataView: DataView
    public header: MessageHeader
    public datumCount: MessageHeaderEntry
    public datumTypes: MessageHeader
    public datumPositions: MessageHeader

    constructor(messageBuffer: ArrayBuffer) {
        this.dataView = new DataView(messageBuffer)
        this.datumCount = _msg_unpackDatumCount(this.dataView)
        this.header = _msg_unpackHeader(this.dataView, this.datumCount)
        this.datumTypes = _msg_unpackDatumTypes(this.header)
        this.datumPositions = _msg_unpackDatumPositions(this.header)
    }

    public static fromTemplate(template: MessageTemplate): Message {
        let i: i32 = 0
        let byteCount: i32 = 0
        let datumTypes: Array<MessageHeaderEntry> = []
        let datumPositions: Array<MessageHeaderEntry> = []

        i = 0
        while (i < template.length) {
            switch(template[i]) {
                case MESSAGE_DATUM_TYPE_FLOAT:
                    byteCount += sizeof<MessageFloatDatum>()
                    datumTypes.push(MESSAGE_DATUM_TYPE_FLOAT)
                    datumPositions.push(byteCount)
                    i += 1
                    break
                case MESSAGE_DATUM_TYPE_STRING:
                    byteCount += sizeof<MessageCharDatum>() * template[i + 1]
                    datumTypes.push(MESSAGE_DATUM_TYPE_STRING)
                    datumPositions.push(byteCount)
                    i += 2
                    break
                default:
                    throw new Error(`unknown datum type " + template[i]`)
            }
        }

        const datumCount = datumTypes.length
        const headerByteCount = _msg_computeHeaderLength(datumCount) * sizeof<MessageHeaderEntry>()
        byteCount += headerByteCount

        const buffer = new ArrayBuffer(byteCount)
        const dataView = new DataView(buffer)
        let writePosition: i32 = 0
        
        dataView.setInt32(writePosition, datumCount)
        writePosition += sizeof<MessageHeaderEntry>()

        for (i = 0; i < datumCount; i++) {
            dataView.setInt32(writePosition, datumTypes[i])
            writePosition += sizeof<MessageHeaderEntry>()
        }

        dataView.setInt32(writePosition, headerByteCount)
        writePosition += sizeof<MessageHeaderEntry>()
        for (i = 0; i < datumCount; i++) {
            dataView.setInt32(writePosition, headerByteCount + datumPositions[i])
            writePosition += sizeof<MessageHeaderEntry>()
        }

        return new Message(buffer)
    }
}

// =========================== HELPERS
function _msg_computeHeaderLength(datumCount: i32): i32 {
    return 1 + datumCount * 2 + 1
}

function _msg_unpackDatumCount(messageDataView: DataView): MessageHeaderEntry {
    return messageDataView.getInt32(0)
}

function _msg_unpackHeader(messageDataView: DataView, datumCount: MessageHeaderEntry): MessageHeader {
    const headerLength = _msg_computeHeaderLength(datumCount)
    // TODO : why is this `wrap` not working ?
    // return Int32Array.wrap(messageDataView.buffer, 0, headerLength)
    const messageHeader = new Int32Array(headerLength)
    for (let i = 0; i < headerLength; i++) {
        messageHeader[i] = messageDataView.getInt32(sizeof<MessageHeaderEntry>() * i)
    }
    return messageHeader
}

function _msg_unpackDatumTypes(header: MessageHeader): MessageHeader {
    return header.slice(1, 1 + header[0])
}

function _msg_unpackDatumPositions(header: MessageHeader): MessageHeader {
    return header.slice(1 + header[0])
}

function _msg_bufferToArrayOfIntegers (buffer: ArrayBuffer): Array<i32> {
    let i: i32 = 0
    const arrayData: DataView = new DataView(buffer)
    const arrayLength: i32 = buffer.byteLength / sizeof<i32>()
    const array: Array<i32> = new Array(arrayLength)
    for (i = 0; i < arrayLength; i++) {
        array[i] = arrayData.getInt32(i * sizeof<i32>())
    }
    return array
}